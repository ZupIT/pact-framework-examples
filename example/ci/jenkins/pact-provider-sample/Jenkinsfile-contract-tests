#!groovy
pipeline {

  agent any

  parameters {
    string(name: 'pactConsumerTags', defaultValue: 'CONTRACT-TEST', description: 'Tags to verify')
  }

  stages {
    stage ('Get Latest Prod Version From Pact Broker') {
      steps {
        sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.82.3/pact-1.82.3-linux-x86_64.tar.gz'
        sh 'tar xzf pact-1.82.3-linux-x86_64.tar.gz'
        dir('pact/bin') {
          script {
            env.PROD_VERSION = sh(script: "./pact-broker describe-version -a AccountBalanceProvider -b http://pact-broker:9292 -l prod | tail -1 | cut -f 1 -d \\|", returnStdout: true).trim()
          }
        }
        echo "Current prod version: " + PROD_VERSION
      }
    }
    stage("Checkout Latest Prod Version") {
      steps {
        sh "git checkout ${PROD_VERSION}"
      }
    }

    stage ('Run Contract Tests') {
      steps {
        dir('account-api') {
          sh "chmod +x mvnw"
          sh "./mvnw clean test " +
                  "-Pcontract-tests " +
                  "-Dpact.provider.version=${GIT_COMMIT} " +
                  "-Dpact.verifier.publishResults=true " +
                  "-Dpactbroker.tags=prod,${params.pactConsumerTags}"
        }
      }
    }
  }

 post {
    success {
        parallel (
            "CallingProviderCheck" : {
                script {
                    echo "Contract Generated Successful, now trigger Provider check!"
                    build job: 'PACT-FLOW-PROVIDER-CAN-I-DEPLOY', propagate: true
                }
            }
            "CallingConsumerCheck" : {
                script {
                    echo "Contract Generated Successful, now trigger Consumer check!"
                    build job: 'PACT-FLOW-CONSUMER-CAN-I-DEPLOY', propagate: true
                }
            }
        )
    }
 }

}